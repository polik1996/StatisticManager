package view;

import java.awt.BorderLayout;
import java.awt.FlowLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.util.List;

import javax.swing.DefaultListModel;
import javax.swing.GroupLayout;
import javax.swing.JButton;
import javax.swing.JDialog;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTextField;
import javax.swing.SwingConstants;
import javax.swing.GroupLayout.Alignment;
import javax.swing.LayoutStyle.ComponentPlacement;
import javax.swing.border.EmptyBorder;

import model.Club;
import model.Team;
import controller.JpaController;

public class TeamDialog extends JDialog implements DataBaseDialog{

	private static final long serialVersionUID = 1L;
	private final JPanel contentPanel = new JPanel();
	private JTextField textFieldID;
	private JTextField textFieldRank;
	private JList<Club> listClub;
	private int mode;
	private Team team;
	private JpaController controller;
	private JButton okButton;
	private JButton cancelButton;


	public static void main(String[] args) {
		try {
			ClubDialog dialog = new ClubDialog();
			dialog.setDefaultCloseOperation(JDialog.DISPOSE_ON_CLOSE);
			dialog.setVisible(true);
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	public TeamDialog() {
		addWindowListener(new WindowAdapter() {
			@Override
			public void windowClosing(WindowEvent arg0) {
				team = null;
			}
		});
		setTitle("Team dialog");
		setBounds(100, 100, 343, 359);
		getContentPane().setLayout(new BorderLayout());
		contentPanel.setBorder(new EmptyBorder(5, 5, 5, 5));
		getContentPane().add(contentPanel, BorderLayout.CENTER);
		JScrollPane scrollPane = new JScrollPane();
		JLabel lblNewLabel = new JLabel("Club");
		lblNewLabel.setHorizontalAlignment(SwingConstants.CENTER);
		
		JPanel panel = new JPanel();
		GroupLayout gl_contentPanel = new GroupLayout(contentPanel);
		gl_contentPanel.setHorizontalGroup(
			gl_contentPanel.createParallelGroup(Alignment.LEADING)
				.addGroup(gl_contentPanel.createSequentialGroup()
					.addGroup(gl_contentPanel.createParallelGroup(Alignment.TRAILING, false)
						.addComponent(lblNewLabel, Alignment.LEADING, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
						.addComponent(scrollPane, Alignment.LEADING, GroupLayout.DEFAULT_SIZE, 147, Short.MAX_VALUE))
					.addPreferredGap(ComponentPlacement.RELATED)
					.addComponent(panel, GroupLayout.DEFAULT_SIZE, 295, Short.MAX_VALUE))
		);
		gl_contentPanel.setVerticalGroup(
			gl_contentPanel.createParallelGroup(Alignment.TRAILING)
				.addGroup(gl_contentPanel.createSequentialGroup()
					.addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
					.addComponent(lblNewLabel)
					.addPreferredGap(ComponentPlacement.RELATED)
					.addGroup(gl_contentPanel.createParallelGroup(Alignment.LEADING)
						.addComponent(panel, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
						.addComponent(scrollPane, Alignment.TRAILING, GroupLayout.PREFERRED_SIZE, 249, GroupLayout.PREFERRED_SIZE)))
		);
		
		listClub = new JList<Club>();
		scrollPane.setViewportView(listClub);
		
		JLabel lblNewLabel_1 = new JLabel("ID");
		lblNewLabel_1.setHorizontalAlignment(SwingConstants.CENTER);
		
		textFieldID = new JTextField();
		textFieldID.setColumns(10);
		
		JLabel lblName = new JLabel("Rank");
		lblName.setHorizontalAlignment(SwingConstants.CENTER);
		
		textFieldRank = new JTextField();
		textFieldRank.setColumns(10);
		GroupLayout gl_panel = new GroupLayout(panel);
		gl_panel.setHorizontalGroup(
			gl_panel.createParallelGroup(Alignment.LEADING)
				.addComponent(lblNewLabel_1, GroupLayout.DEFAULT_SIZE, 164, Short.MAX_VALUE)
				.addComponent(lblName, GroupLayout.DEFAULT_SIZE, 164, Short.MAX_VALUE)
				.addComponent(textFieldRank, GroupLayout.DEFAULT_SIZE, 164, Short.MAX_VALUE)
				.addComponent(textFieldID, GroupLayout.DEFAULT_SIZE, 164, Short.MAX_VALUE)
		);
		gl_panel.setVerticalGroup(
			gl_panel.createParallelGroup(Alignment.LEADING)
				.addGroup(gl_panel.createSequentialGroup()
					.addComponent(lblNewLabel_1, GroupLayout.PREFERRED_SIZE, 22, GroupLayout.PREFERRED_SIZE)
					.addPreferredGap(ComponentPlacement.RELATED)
					.addComponent(textFieldID, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
					.addPreferredGap(ComponentPlacement.RELATED)
					.addComponent(lblName, GroupLayout.PREFERRED_SIZE, 22, GroupLayout.PREFERRED_SIZE)
					.addPreferredGap(ComponentPlacement.RELATED)
					.addComponent(textFieldRank, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
					.addContainerGap(147, Short.MAX_VALUE))
		);
		panel.setLayout(gl_panel);
		contentPanel.setLayout(gl_contentPanel);
		{
			JPanel buttonPane = new JPanel();
			buttonPane.setLayout(new FlowLayout(FlowLayout.RIGHT));
			getContentPane().add(buttonPane, BorderLayout.SOUTH);
			{
				okButton = new JButton("OK");
				okButton.addActionListener(new ActionListener() {
					public void actionPerformed(ActionEvent arg0) {
						createTeam();
						controller.operateObject(team, mode);
						TeamDialog.this.setVisible(false);
					}
				});
				okButton.setActionCommand("OK");
				buttonPane.add(okButton);
				getRootPane().setDefaultButton(okButton);
			}
			{
				cancelButton = new JButton("Cancel");
				cancelButton.addActionListener(new ActionListener() {
					public void actionPerformed(ActionEvent arg0) {
						team = null;
						TeamDialog.this.setVisible(false);
					}
				});
				cancelButton.setActionCommand("Cancel");
				buttonPane.add(cancelButton);
			}
		}
	}

	protected void createTeam() {
		team = new Team();
		if (mode == DELETE || mode == UPDATE || mode == ADD)
			try {
				int id = Integer.parseInt(textFieldID.getText());
				team.setIdTeam(id);
			} catch (Exception e) {	
				team = null;
				e.printStackTrace();
				return;
			}
		if(mode == DELETE) return;
		if (mode == ADD || mode == UPDATE)
			try {	
				String rank = textFieldRank.getText();
				team.setRank(rank);
			} catch (Exception e) {
				team = null;
				e.printStackTrace();
				return;
			}
		if (mode == ADD || mode == UPDATE){
			team.setClub(listClub.getSelectedValue());
		}

	}

	private void fillClubList() {	
		@SuppressWarnings("unchecked")
		List<Club> list = (List<Club>) controller.getObjectList(Club.class);
		DefaultListModel<Club> model = new DefaultListModel<>();
		for(Club s : list)
			model.addElement(s);
		listClub.setModel(model);
}

	
	@Override
	public Object getObject() {
		return team;
	}

	@Override
	public void openWithMode(int mode, JpaController controller) {
		this.controller = controller;
		this.mode = mode;
		if(mode == ADD){
			fillClubList();
			okButton.setText("Store");
			textFieldID.setEnabled(true);
			textFieldRank.setEnabled(true);
		}
		else if(mode ==UPDATE) {
			fillClubList();
			okButton.setText("Update");
			textFieldID.setEnabled(true);
			textFieldRank.setEnabled(true);
		}
		else if(mode == DELETE){
			okButton.setText("Delete");
			textFieldID.setEnabled(true);
			textFieldRank.setEnabled(false);
		}	
		this.setVisible(true);
	}
}
