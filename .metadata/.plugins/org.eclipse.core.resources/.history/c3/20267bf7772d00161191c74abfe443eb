package view;

import java.awt.BorderLayout;
import java.awt.FlowLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.util.List;

import javax.swing.DefaultListModel;
import javax.swing.GroupLayout;
import javax.swing.JButton;
import javax.swing.JDialog;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTextField;
import javax.swing.SwingConstants;
import javax.swing.GroupLayout.Alignment;
import javax.swing.LayoutStyle.ComponentPlacement;
import javax.swing.border.EmptyBorder;

import model.Player;
import model.Team;
import controller.JpaController;

public class PlayerDialog extends JDialog implements DataBaseDialog{

	private static final long serialVersionUID = 1L;
	private final JPanel contentPanel = new JPanel();
	private JTextField textFieldID;
	private JTextField textFieldName;
	private JTextField textFieldNationality;
	private JList<Team> listTeam;
	private int mode;
	private Player player;
	private JpaController controller;
	private JButton okButton;
	private JButton cancelButton;
	private JTextField textFieldPosition;


	public static void main(String[] args) {
		try {
			ClubDialog dialog = new ClubDialog();
			dialog.setDefaultCloseOperation(JDialog.DISPOSE_ON_CLOSE);
			dialog.setVisible(true);
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	public PlayerDialog() {
		addWindowListener(new WindowAdapter() {
			@Override
			public void windowClosing(WindowEvent arg0) {
				player = null;
			}
		});
		setTitle("Player dialog");
		setBounds(100, 100, 343, 333);
		getContentPane().setLayout(new BorderLayout());
		contentPanel.setBorder(new EmptyBorder(5, 5, 5, 5));
		getContentPane().add(contentPanel, BorderLayout.CENTER);
		JScrollPane scrollPane = new JScrollPane();
		JLabel lblNewLabel = new JLabel("Team");
		lblNewLabel.setHorizontalAlignment(SwingConstants.CENTER);
		
		JPanel panel = new JPanel();
		GroupLayout gl_contentPanel = new GroupLayout(contentPanel);
		gl_contentPanel.setHorizontalGroup(
			gl_contentPanel.createParallelGroup(Alignment.LEADING)
				.addGroup(gl_contentPanel.createSequentialGroup()
					.addGroup(gl_contentPanel.createParallelGroup(Alignment.TRAILING)
						.addComponent(lblNewLabel, Alignment.LEADING, GroupLayout.DEFAULT_SIZE, 147, Short.MAX_VALUE)
						.addComponent(scrollPane, Alignment.LEADING, GroupLayout.DEFAULT_SIZE, 147, Short.MAX_VALUE))
					.addPreferredGap(ComponentPlacement.RELATED)
					.addComponent(panel, GroupLayout.DEFAULT_SIZE, 164, Short.MAX_VALUE))
		);
		gl_contentPanel.setVerticalGroup(
			gl_contentPanel.createParallelGroup(Alignment.TRAILING)
				.addGroup(Alignment.LEADING, gl_contentPanel.createSequentialGroup()
					.addContainerGap()
					.addComponent(lblNewLabel)
					.addPreferredGap(ComponentPlacement.RELATED)
					.addGroup(gl_contentPanel.createParallelGroup(Alignment.LEADING)
						.addComponent(panel, Alignment.TRAILING, GroupLayout.DEFAULT_SIZE, 296, Short.MAX_VALUE)
						.addComponent(scrollPane, GroupLayout.DEFAULT_SIZE, 296, Short.MAX_VALUE)))
		);
		
		listTeam = new JList<Team>();
		scrollPane.setViewportView(listTeam);
		
		JLabel lblNewLabel_1 = new JLabel("ID");
		lblNewLabel_1.setHorizontalAlignment(SwingConstants.CENTER);
		
		textFieldID = new JTextField();
		textFieldID.setColumns(10);
		
		JLabel lblName = new JLabel("Name");
		lblName.setHorizontalAlignment(SwingConstants.CENTER);
		
		textFieldName = new JTextField();
		textFieldName.setColumns(10);
		
		JLabel lblPresident = new JLabel("Nationality");
		lblPresident.setHorizontalAlignment(SwingConstants.CENTER);
		
		textFieldNationality = new JTextField();
		textFieldNationality.setColumns(10);
		
		JLabel lblPosition = new JLabel("Position");
		lblPosition.setHorizontalAlignment(SwingConstants.CENTER);
		
		textFieldPosition = new JTextField();
		textFieldPosition.setColumns(10);
		GroupLayout gl_panel = new GroupLayout(panel);
		gl_panel.setHorizontalGroup(
			gl_panel.createParallelGroup(Alignment.LEADING)
				.addComponent(lblNewLabel_1, GroupLayout.DEFAULT_SIZE, 164, Short.MAX_VALUE)
				.addComponent(lblName, GroupLayout.DEFAULT_SIZE, 164, Short.MAX_VALUE)
				.addComponent(textFieldName, GroupLayout.DEFAULT_SIZE, 164, Short.MAX_VALUE)
				.addComponent(textFieldID, GroupLayout.DEFAULT_SIZE, 164, Short.MAX_VALUE)
				.addComponent(lblPresident, GroupLayout.DEFAULT_SIZE, 164, Short.MAX_VALUE)
				.addComponent(textFieldNationality, GroupLayout.DEFAULT_SIZE, 164, Short.MAX_VALUE)
				.addComponent(lblPosition, GroupLayout.DEFAULT_SIZE, 164, Short.MAX_VALUE)
				.addComponent(textFieldPosition, GroupLayout.DEFAULT_SIZE, 164, Short.MAX_VALUE)
		);
		gl_panel.setVerticalGroup(
			gl_panel.createParallelGroup(Alignment.LEADING)
				.addGroup(gl_panel.createSequentialGroup()
					.addComponent(lblNewLabel_1, GroupLayout.PREFERRED_SIZE, 22, GroupLayout.PREFERRED_SIZE)
					.addPreferredGap(ComponentPlacement.RELATED)
					.addComponent(textFieldID, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
					.addPreferredGap(ComponentPlacement.RELATED)
					.addComponent(lblName, GroupLayout.PREFERRED_SIZE, 22, GroupLayout.PREFERRED_SIZE)
					.addPreferredGap(ComponentPlacement.RELATED)
					.addComponent(textFieldName, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
					.addPreferredGap(ComponentPlacement.RELATED)
					.addComponent(lblPresident, GroupLayout.PREFERRED_SIZE, 22, GroupLayout.PREFERRED_SIZE)
					.addPreferredGap(ComponentPlacement.RELATED)
					.addComponent(textFieldNationality, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
					.addPreferredGap(ComponentPlacement.RELATED)
					.addComponent(lblPosition, GroupLayout.PREFERRED_SIZE, 22, GroupLayout.PREFERRED_SIZE)
					.addPreferredGap(ComponentPlacement.RELATED)
					.addComponent(textFieldPosition, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
					.addContainerGap(65, Short.MAX_VALUE))
		);
		panel.setLayout(gl_panel);
		contentPanel.setLayout(gl_contentPanel);
		{
			JPanel buttonPane = new JPanel();
			buttonPane.setLayout(new FlowLayout(FlowLayout.RIGHT));
			getContentPane().add(buttonPane, BorderLayout.SOUTH);
			{
				okButton = new JButton("OK");
				okButton.addActionListener(new ActionListener() {
					public void actionPerformed(ActionEvent arg0) {
						createPalyer();
						controller.operateObject(player, mode);
						PlayerDialog.this.setVisible(false);
					}
				});
				okButton.setActionCommand("OK");
				buttonPane.add(okButton);
				getRootPane().setDefaultButton(okButton);
			}
			{
				cancelButton = new JButton("Cancel");
				cancelButton.addActionListener(new ActionListener() {
					public void actionPerformed(ActionEvent arg0) {
						player = null;
						PlayerDialog.this.setVisible(false);
					}
				});
				cancelButton.setActionCommand("Cancel");
				buttonPane.add(cancelButton);
			}
		}
	}

	protected void createPalyer() {
		player = new Player();
		if (mode == DELETE || mode == UPDATE || mode == ADD)
			try {
				int id = Integer.parseInt(textFieldID.getText());
				player.setIdPlayer(id);
			} catch (Exception e) {	
				player = null;
				e.printStackTrace();
				return;
			}
		if(mode == DELETE) return;
		if (mode == ADD || mode == UPDATE)
			try {	
				String name = textFieldName.getText();
				String nationality = textFieldNationality.getText();
				String position = textFieldPosition.getText();
				player.setName(name);
				player.setNationality(nationality);
				player.setPosition(position);
				player.setTeam(listTeam.getSelectedValue());
				} catch (Exception e) {
				player = null;
				e.printStackTrace();
				return;
			}
		if (mode == ADD ){
			player.setTeam(listTeam.getSelectedValue());
		}

	}

	private void fillTeamList() {	
		@SuppressWarnings("unchecked")
		List<Team> list = (List<Team>) controller.getObjectList(Team.class);
		DefaultListModel<Team> model = new DefaultListModel<Team>();
		for(Team s : list)
			model.addElement(s);
		listTeam.setModel(model);
}

	
	@Override
	public Object getObject() {
		return player;
	}

	@Override
	public void openWithMode(int mode, JpaController controller) {
		this.controller = controller;
		this.mode = mode;
		if(mode == ADD){
			fillTeamList();
			okButton.setText("Store");
			textFieldID.setEnabled(true);
			textFieldName.setEnabled(true);
			textFieldNationality.setEnabled(true);
			textFieldPosition.setEnabled(true);
		}
		else if(mode ==UPDATE) {
			fillTeamList();
			okButton.setText("Update");
			textFieldID.setEnabled(true);
			textFieldName.setEnabled(true);
			textFieldNationality.setEnabled(true);
			textFieldPosition.setEnabled(true);
		}
		else if(mode == DELETE){
			okButton.setText("Delete");
			textFieldID.setEnabled(true);
			textFieldName.setEnabled(false);
			textFieldNationality.setEnabled(false);
			textFieldPosition.setEnabled(false);
		}	
		this.setVisible(true);
	}
}
